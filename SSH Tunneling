
Who: Members looking to start the Title 10/Title 50 pipeline
What: Using Local/Remote port forwarding to establish an encrypted tunnel  
When: Creating an encrypted tunnel to allow certain connections to maneuver through those tunnels 
Where: Via Unix/Linux CMD line as well as Windows 10 CMD line 
Why: The main benefit to Local/Remote port fowarding is directing certain traffic travel through encrypted tunnels you have established. With the ablitly to extend those tunnels to reach hosts further into the network.
           
           --Local Port Fowarding--
T1 --> T2
ssh root@<LocalIP> -L <Port#>:<TargetIP>:<Target Port> 
 

T1 192.168.159.134 --> T2 192.168.159.132

From T1: 
ssh root@127.0.0.1 -L 4444:192.168.159.132:22  (the Kickoff)
 >ssh root@127.0.0.1 -p 4444  
  >>Access to T2 

Note: The -L option is only used for establishing a local port forward for a FUTURE connection. You can only interact with it by logging into it via another ssh session. In this case we logged into T2(192.168.159.132) via ssh on port 4444 root@127.0.0.1 (local host).  


Breakdown:
For the 1st part of ssh line syntax, by default it establishes a local port assignment you can add a local loopback address at this point 
           " ssh root@127.0.0.1"
           
The 2nd part of the syntax determines what port you are assigning locally (by default it will assign 127.0.0.1 to the -L 4444)
           " -L 4444: "

The 3rd Part of the syntax covers target ip and destination port
           " 192.168.159.132:22 "
           
           
           --Remote Port Forwarding--
T1 <-- T2
T1 192.168.159.134 <--T2 192.168.159.132

ssh root@<TargetIP> -R <Remote Port#>:<LocalIP>:<Localport>

From T1
ssh root@192.168.159.132 -R 9999:localhost:22
> From T2 
   >>ssh root@127.0.0.1 -p 9999
     >>Access to T2 from T1 sending connection from T2 back to T1 like a listenern and closed connection


Note: The -R option is used for establishing a port on a remote machine that will connect back to your host machine. From the remote machine you can also interact with the connection. In this case we ssh'd to the remote machine, opened port 9999 that connected back to our host. Then from the remote machine (T1) we interacted with the connection via root@127.0.0.1 on port 9999.

Breakdown:
For the 1st part of the ssh line syntax, we ssh to the remote machine 
           " ssh root@192.168.159.132"
           
For the 2nd part of the ssh line syntax, we establish a designated remote port 9999
           "-R 9999"
           
For the 3rd part of the ssh line syntax we designate the callback connection to our host machine
           "localhost:22"
           
           
           --Examples--
RDP over ssh connection throuh designated port
ssh -R 8181:localhost:3389 user@IP


           T1             T2   
ssh root@workIP -L 4444:homeIP:3389  
So in this example T1 would be the work computer. The firewall allows inbound and outbound ssh connections. The firewall does not allow 3389 (RDP) connections. Using the -L options you would assign a port (4444) to forward traffic to your "homeIP" on (3389) RDP. 

             T2                T1
ssh root@webserverIP -R 8080:homeIP:22 
So in this example T2 would be the webserver. The firewall allows inbound and outbound ssh connections. The firewall does not allow web traffic over 8080. Using the -R options we would assign a port (8080) on T2 to forward traffic back to our "homeIP" on port 80 through a secure connection.    

References:
1.man ssh - man page command for ssh on linux
2.https://www.youtube.com/watch?v=AtuAdk4MwWw&t=302s - A video explaination of ssh tunnels
3.https://www.youtube.com/watch?v=g_Row8zEJZc&t=3s - More a visual explaination of ssh tunnels
4.The Secure Shell by Daniel J. Barrett, Richard E. Silverman, and Robert G. Byrnes   
           -Page 350-355 section 9.2.1 Local Forwarding
           -Page 356 section 9.2.1.2 Remote Forwarding
